package com.example.demo.controller;


import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.EvenementBean;
import com.example.demo.OutilBean;
import com.example.demo.PublicationBean;
import com.example.demo.entities.EnseignantChercheur;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Membre;
import com.example.demo.proxies.EvenementProxy;
import com.example.demo.proxies.OutilProxy;
import com.example.demo.proxies.PublicationProxy;
import com.example.demo.service.IMemberService;


@CrossOrigin(origins = "*",allowedHeaders = "*")
@RestController
public class MembreRestController {
	@Autowired
	IMemberService iMemberService;
	@Autowired
	PublicationProxy publicationproxy;
	@Autowired
	OutilProxy outilproxy;
	@Autowired
	EvenementProxy evenementproxy;
	
	@GetMapping(value = "/membres")
	public List<Membre> findAllmembres()
	{
		return iMemberService.findAll();
	}

	@GetMapping(value = "/membres/{id}")
	public Membre findoneMembre(@PathVariable Long id)
	{
		return iMemberService.findMember(id);
	}

	@GetMapping(value = "/etudiants")
	public List<Etudiant> findAllEtudiants() {
		return iMemberService.findAllEtudiants();}
	
	@GetMapping(value = "/etudiants/{id}")
	public Etudiant findoneEtudiant(@PathVariable Long id)
	{
		return iMemberService.findEtudiant(id);
	}
	
	@GetMapping(value = "/enseignants")
	public List<EnseignantChercheur> findAllEnseignants() {
		return iMemberService.findAllEnseignants();}
	
	@GetMapping(value = "/enseignants/{id}")
	public EnseignantChercheur findoneEnseignant(@PathVariable Long id)
	{
		return iMemberService.findEnseignant(id);
	}
	@DeleteMapping(value = "/members/{id}")
	public void deleteEvenement(@PathVariable Long id) {
		iMemberService.deleteMember(id);
	}
	
	@PostMapping(value = "/etudiants")
	public Membre addMembre(@RequestBody Etudiant etd)
	{
		return iMemberService.addMember(etd);
	}

	@PostMapping(value = "/membres/enseignant")
	public Membre addMembre(@RequestBody EnseignantChercheur ens)
	{
		return iMemberService.addMember(ens);
	}
	@PutMapping(value="/membres/etudiant/{id}",)
	public Membre updatemembre(@PathVariable Long id, @RequestBody Etudiant p)
	{
		p.setId(id);
		return iMemberService.updateMember(p);
	}

	@RequestMapping(value="/membres/enseignant/{id}",method = {RequestMethod.GET, RequestMethod.PUT})
	public Membre updateMembre(@PathVariable Long id, @RequestBody EnseignantChercheur p)
	{
		p.setId(id);
	       return iMemberService.updateMember(p);
	}
	@PutMapping(value="/membres/encadrant")
	public Membre affecter(@RequestParam Long idetd , @RequestParam Long idens )
	{
		
	       return iMemberService.affecterencadrantToetudiant(idetd, idens);
	}
	@PutMapping(value="/membres/publications")
	public void affecterauteurTopublication(@RequestParam Long idauteur,@RequestParam Long idpub)
	{
		
	        iMemberService.affecterauteurTopublication(idauteur, idpub);
	}
	@PutMapping(value="/membres/outils")
	public void affecterauteurTooutil(@RequestParam Long idauteur,@RequestParam Long idout)
	{
		
	        iMemberService.affecterauteurTooutil(idauteur, idout);
	}
	@PutMapping(value="/membres/events")
	public void affecterorganisateurToevent(@RequestParam Long idorg,@RequestParam Long idevent)
	{
		
	        iMemberService.affecterorganisateurToevenement(idorg, idevent);
	}
}
